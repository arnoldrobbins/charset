.TH CHARSET 3 "January 26 2025" MinRX
.SH NAME
charset \(em store sets of characters and test against them
.SH SYNOPSIS
.ft CW
.nf
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include "charset.h"

typedef struct _charset charset_t;

#define MAX_FIRSTBYTES .\^.\^.

typedef struct {
	bool firstbytes[MAX_FIRSTBYTES];
} charset_firstbytes_t;

// error code values:
enum {
	CSET_SUCCESS = 0,		// no problems
	CSET_EBADPTR,		// NULL pointer received
	CSET_EFROZEN,		// Cannot add more characters to the set
	CSET_ECOLLATE,		// corresponds to REG_ECOLLATE
	CSET_ECTYPE,		// corresponds to REG_ECTYPE
	CSET_ESPACE,		// corresponds to REG_ESPACE
	CSET_ERANGE,		// Corresponds to REG_ERANGE
};

charset_t *charset_create(int *errcode, int mb_cur_max, bool is_utf8);

int charset_add_range(charset_t *set, int32_t first, int32_t last);
int charset_add_char(charset_t *set, int32_t wc);
int charset_add_cclass(charset_t *set, const char *cclass);
int charset_add_equiv(charset_t *set, int32_t equiv);
int charset_add_collate(charset_t *set, const int32_t *collate);
int charset_set_no_newline(charset_t *set, bool no_newline);

charset_t *charset_invert(charset_t *set, int *errcode);
charset_t *charset_copy(charset_t *set, int *errcode);
int charset_merge(charset *dest, charset *src);

int charset_finalize(charset *set);

bool charset_in_set(charset_t *set, int32_t wc);
charset_firstbytes_t charset_firstbytes(charset *set, int *errcode);

void charset_dump(const charset_t *set, FILE *fp, bool use_c_format);
int charset_free(const charset_t *set);
.fi
.ft R
.SH DESCRIPTION
.I Charset
is a suite of functions for use in implementing a regular
expression engine. In particular, it can be used to manage bracket expressions.
The \f(CWcharset_t\fP type is purposely opaque; the provided functions
manipulate the internals of the structure and test a character
for membership in the set.
.PP
.I Charset
works with wide characters (the C type \f(CWint32_t\fP). Typically these are
Unicode code points but they don't have to be.
It is the responsibility of the caller to ensure that all wide character
values passed in to
.I charset
are valid in the current character set / locale.
Character values must be greater-than or equal to zero.
It is also the responsibility of the caller to deal with case (in)variance.
I.e., the caller must separately add both upper- and lower-case variants of a character
to the
.I charset
if that is the required semantics (such as the \f(CWREG_ICASE\fP flag
from
.IR regex (3)).
.PP
Almost all of the
.I charset
routines return \f(CWCSET_SUCCESS\fP if there were no problems,
or one of the other error codes
if something should go wrong.
.PP
The functions are as follows:
.TP
\f(CWcharset_t *charset_create(int *errcode, int mb_cur_max, bool is_utf8);\fP
Create a
.I charset
and return a pointer to it.
Returns non-\f(CWNULL\fP upon success or \f(CWNULL\fP if something went wrong.
In the latter case, \f(CW*errcode\fP is filled with the error.
\f(CWmb_cur_max\fP should be the current value for \f(CWMB_CUR_MAX\fP,
and \f(CWis_utf8\fP should be \f(CWtrue\fP if the current locale
is a UTF-8 locale.  It's up to the caller to determine (and possibly
cache) these values in advance.
.TP
\f(CWint charset_add_range(charset_t *set, int32_t first, int32_t last);\fP
Add the characters in the range \f(CWfirst\fP to \f(CWlast\fP to the
set. It should be the case that \f(CWfirst\fP \(<= \f(CWlast\fP.
.TP
\f(CWint charset_add_char(charset_t *set, int32_t wc);\fP
Add the character \f(CWwc\fP to the set.
.TP
\f(CWint charset_add_cclass(charset_t *set, const char *cclass);\fP
Add the given character class, \f(CWcclass\fP, to the set. This should be a string
representing a supported character class, such as \f(CW"alpha"\fP.
The string should
.I not
have
the enclosing \f(CW[:\fP and \f(CW:]\fP of regular expression syntax.
.TP
\f(CWint charset_add_equiv(charset_t *set, int32_t equiv);\fP
Add the given equivalence class \f(CWequiv\fP to the set. This should be a
a single wide character.
.TP
\f(CWint charset_add_collate(charset_t *set, const int32_t *collate);\fP
Add the given collating sequence \f(CWcollate\fP
(as a wide character string) to the set. This string should
.I not
have the enclosing \f(CW[.\fP and \f(CW.]\fP of regular expression syntax.
In the current implementation, only the first wide character is used.
.TP
\f(CWint charset_set_no_newline(charset_t *set, bool no_newline);\fP
Set the internal ``no newline'' flag to the value of \f(CWno_newline\fP.
In some cases, newline should not be allowed to match dot; this routine
provides control of this feature.
.TP
\f(CWcharset_t *charset_invert(charset_t *set, int *errcode);\fP
Return a pointer to a new 
.I charset
where the sense of the current set of characters and ranges
that were previously added to \f(CWset\fP are inverted. In other words, characters
that would cause
\f(CWcharset_in_set()\fP to return \f(CWtrue\fP for the original
set will return false for the new set.
This operation finalizes the original set. (See below for more information on
finalization.)
If an error occurs, it returns \f(CWNULL\fP and the error code
is placed in \f(CW*errcode\fP.
.TP
\f(CWcharset_t *charset_copy(charset_t *set, int *errcode);\fP
Return a pointer to a new
.I charset
which is a copy of the orignal one.
Finalization is not done for either set.
(However, if you know you won't change the original, you
should finalize it yourself, this can save space.)
If an error occurs, it returns \f(CWNULL\fP and the error code
is placed in \f(CW*errcode\fP.
.TP
\f(CWint charset_merge(charset *dest, charset *src);\fP
Merge the contents of \f(CW*src\fP into the contents
of \f(CW*dest\fP.
\f(CW*dest\fP should not have been finalized.
.TP
\f(CWint charset_finalize(charset *set);\fP
Finalize the set. See the discussion below.
.TP
\f(CWbool charset_in_set(charset_t *set, int32_t wc);\fP
Returns \f(CWtrue\fP if \f(CWwc\fP is in the set, or \f(CWfalse\fP if something went wrong.
This operation finalizes the set.
.TP
\f(CWcharset_firstbytes_t charset_firstbytes(charset *set, int *errcode);\fP
Return a \f(CWcharset_firstbytes_t\fP structure representing the
possible first bytes of all the wide characters in the set.
This operation assumes that the current character set is Unicode
and the character set encoding is UTF-8.
This operation finalizes the set.
.TP
\f(CWvoid charset_dump(const charset_t *set, FILE *fp, bool use_c_format);\fP
Dump the internal data structures of \f(CWset\fP to \f(CWfp\fP.
This is mainly for debugging and testing.
If \f(CWuse_c_format\fP is true, the data is dumped as initializers
for an array of structures holding ranges. This is mainly for
use in additional development.
.TP
\f(CWint charset_free(const charset_t *set);\fP
Release the storage used by \f(CWset\fP.
.PP
To create a set that ``matches all characters,'' you may
simply add a range from zero to the maximum valid value,
or create an empty set and invert it.
.SS Finalization
.PP
Bracket expressions can be written in ways that are
repetitive or silly, but still valid. For example,
\f(CW[a-e[:lower:]0-9c-f]\fP.  The
.I charset
functions track the individual characters, ranges, and
other items that were added to them as they're added.
When it's necessary to check if a character is present
in the set, or for some of the other operations listed
above, the set is
.IR finalized .
This means that the data structure is compacted and
reduced to the minimum necessary for determining if
a character is present.
.PP
Once a set has been finalized,
it is an error to attempt
to continue adding entities to it,
or to set the ``no newline'' flag.
.\" .SH EXAMPLE
.SH NOTES
\f(CWcharset_create()\fP requires passing in the value
of \f(CWMB_CUR_MAX\fP instead of calling it directly,
because, at least on GLIBC systems, this macro hides
a function call. Thus it's best if the caller caches
this value (if possible) and passes it to \f(CWcharset_create()\fP.
.SH "SEE ALSO"
.IR regex (3),
.IR wctype (3),
.IR "Efficient Searching of Large Character Sets \(em Take Two" ,
available from
\f(CWhttps://github.com/arnold/robbins/charset\fP.
.SH AUTHOR
Arnold Robbins,
.BR arnold@skeeve.com .
.SH COPYING PERMISSIONS
Copyright \(co 2023, 2024, 2025,
Arnold David Robbins.
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
.PP
1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.
.PP
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
“AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" vim: set filetype=nroff :
